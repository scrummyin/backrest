run 005 - rmt 1, cmp 0, hardlink 0
==================================

full backup
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --manifest-save-threshold=3 --db-timeout=2 --type=full --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-timeout=2 --db-user=vagrant --log-level-console=debug --log-level-file=trace --manifest-save-threshold=3 --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --type=full
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 2, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-timeout=2 --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 2, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-timeout=2 --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = full
DEBUG:     Backup->typeFind=>: strLabel = [undef]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [undef], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = full
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/base, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/global, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/path-test, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/pg_tblspc, strPathType = backup:tmp
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base1.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/base/base1.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/base/base1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common/base/base1.txt (4B, 57%) checksum a3b357a3e395e43fcfb19bb13f3c1b5179279593
DEBUG:     BackupFile::backupManifestUpdate: save manifest: lManifestSaveCurrent = 4, lManifestSaveSize = 3
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/PG_VERSION, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/PG_VERSION, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/PG_VERSION, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common/PG_VERSION (3B, 100%) checksum e1f7a3a299f62225cba076fc6d3d6e677f303482
DEBUG:     BackupFile::backupManifestUpdate: save manifest: lManifestSaveCurrent = 3, lManifestSaveSize = 3
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-2], strDestinationFile = base/global/pg_control, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/global/pg_control, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/global/pg_control, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common/global/pg_control (8KB) checksum 56fe5780b8dca9705e0c22032a83828860a21235
DEBUG:     Backup->processManifest=>: lSizeTotal = 8199
 INFO: full backup size = 8KB
 INFO: new backup label = [BACKUP-FULL-1]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-FULL-1]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-FULL-1], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->exists(): strPath = latest, strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db/latest
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->remove=>: bRemoved = false
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-FULL-1], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --db-timeout=2 --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-1])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-1])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-1]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
# cluster-specific settings
[db]
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

# backup settings
[global:backup]
backup-host=127.0.0.1
backup-user=backrest

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
# cluster-specific settings
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

# backup settings
[global:backup]
archive-copy=y
start-fast=y

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-FULL-1]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-FULL-1]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="full"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"a3b357a3e395e43fcfb19bb13f3c1b5179279593","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

full backup (protocol timeout)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --db-timeout=1 --type=full --stanza=db backup --test --test-delay=1 --test-point=backup-start=y
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-timeout=1 --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --test --test-delay=1 --test-point=backup-start=y --type=full
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-timeout=1 --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-timeout=1 --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = full
DEBUG:     Backup->typeFind=>: strLabel = [undef]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [undef], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = full
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/base, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/global, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/path-test, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/pg_tblspc, strPathType = backup:tmp
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base1.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/base/base1.txt, strSourcePathType = db:absolute, strUser = [undef]
ERROR: [141]: remote process terminated: ERROR [141]: unable to read line after 1 seconds
DEBUG:     Exit::exitSafe(): iExitCode = 141, strSignal = [undef]
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --force stop
------------------------------------------------------------------------------------------------------------------------------------
 INFO: stop start: --config=[TEST_PATH]/db/pg_backrest.conf --force --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local
 INFO: sent term signal to process [PROCESS-ID]
       
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: stop stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

full backup (abort backup - local)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=full --stanza=db backup --test --test-delay=5 --test-point=backup-start=y
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --test --test-delay=5 --test-point=backup-start=y --type=full
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = full
DEBUG:     Backup->typeFind=>: strLabel = [undef]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [undef], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = full
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/base, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/global, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/path-test, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/pg_tblspc, strPathType = backup:tmp
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base1.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/base/base1.txt, strSourcePathType = db:absolute, strUser = [undef]
ERROR: [138]: remote process terminated: ERROR [138]: process terminated on a TERM signal
DEBUG:     Exit::exitSafe(): iExitCode = 138, strSignal = [undef]
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

full backup (global stop)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=full --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --type=full
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = full
DEBUG:     Backup->typeFind=>: strLabel = [undef]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
ERROR: [137]: remote process terminated: ERROR [137]: stop file exists for all stanzas
DEBUG:     Exit::exitSafe(): iExitCode = 137, strSignal = [undef]
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=db stop
------------------------------------------------------------------------------------------------------------------------------------
 INFO: stop start: --config=[TEST_PATH]/db/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --stanza=db
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: stop stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=db stop
------------------------------------------------------------------------------------------------------------------------------------
 INFO: stop start: --config=[TEST_PATH]/db/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --stanza=db
 WARN: stop file already exists for stanza db
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: stop stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

full backup (stanza stop)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=full --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --type=full
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = full
DEBUG:     Backup->typeFind=>: strLabel = [undef]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
ERROR: [137]: remote process terminated: ERROR [137]: stop file exists for stanza db
DEBUG:     Exit::exitSafe(): iExitCode = 137, strSignal = [undef]
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

start db (local)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=db start
------------------------------------------------------------------------------------------------------------------------------------
 INFO: start start: --config=[TEST_PATH]/db/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --stanza=db
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: start stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

start (local)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf start
------------------------------------------------------------------------------------------------------------------------------------
 INFO: start start: --config=[TEST_PATH]/db/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: start stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

start (local)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf start
------------------------------------------------------------------------------------------------------------------------------------
 INFO: start start: --config=[TEST_PATH]/db/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local
 WARN: stop file does not exist
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: start stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --force stop
------------------------------------------------------------------------------------------------------------------------------------
 INFO: stop start: --config=[TEST_PATH]/backrest/pg_backrest.conf --force --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest
 INFO: sent term signal to process [PROCESS-ID]
       
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: stop stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

full backup (abort backup - remote)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=full --stanza=db backup --test --test-delay=5 --test-point=backup-start=y
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --test --test-delay=5 --test-point=backup-start=y --type=full
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = full
DEBUG:     Backup->typeFind=>: strLabel = [undef]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [undef], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
 WARN: aborted backup of same type exists, will be cleaned to remove invalid files and resumed
 INFO: clean backup temp path: [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [undef], strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 0, oManifestHashRef = [hash], strPathFileOp = [undef], strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = base, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 2, oManifestHashRef = [hash], strPathFileOp = base/base, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 2, oManifestHashRef = [hash], strPathFileOp = base/global, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 2, oManifestHashRef = [hash], strPathFileOp = base/path-test, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     Backup->fileNotInManifest=>: stryFile = (file.tmp)
DEBUG:     Backup->tmpClean: remove file [TEST_PATH]/backrest/temp/db.tmp/file.tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = full
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/base, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/global, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/path-test, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/pg_tblspc, strPathType = backup:tmp
DEBUG:     Exit::exitSafe(): iExitCode = -1, strSignal = TERM
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false
ERROR: [138]: process terminated on a TERM signal

full backup (global stop)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=full --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --type=full
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
ERROR: [137]: stop file exists for all stanzas
DEBUG:     Exit::exitSafe(): iExitCode = 137, strSignal = [undef]
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

start (remote)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf start
------------------------------------------------------------------------------------------------------------------------------------
 INFO: start start: --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: start stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

info db
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=db info
------------------------------------------------------------------------------------------------------------------------------------
DEBUG:     info start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = db
DEBUG:     Info->stanzaList(): oFile = [object], strStanza = db
stanza db
   status: ok
   oldest backup label: [BACKUP-FULL-1]
   oldest backup timestamp: [TIMESTAMP-STR]
   latest backup label: [BACKUP-FULL-1]
   latest backup timestamp: [TIMESTAMP-STR]
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
DEBUG:     info stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

info db
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=db info --output=json
------------------------------------------------------------------------------------------------------------------------------------
DEBUG:     info start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --output=json --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = db
DEBUG:     Info->stanzaList(): oFile = [object], strStanza = db
[
   {
       "backup" : [
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-FULL-1]",
               "prior" : null,
               "reference" : null,
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "full"
           }
       ],
       "db" : [
           {
               "id" : "1",
               "system-id" : 6156904820763115222,
               "version" : "9.3"
           }
       ],
       "name" : "db",
       "status" : {
           "code" : 0,
           "message" : "ok"
       }
   }
]
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
DEBUG:     info stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

full backup (resume)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=full --stanza=db backup --test --test-delay=0.2 --test-point=backup-resume=y
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --test --test-delay=0.2 --test-point=backup-resume=y --type=full
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
 WARN: backup [BACKUP-FULL-1] is missing from the repository - removed from backup.info
DEBUG:     BackupInfo->delete(): strBackupLabel = [BACKUP-FULL-1]
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = full
DEBUG:     Backup->typeFind=>: strLabel = [undef]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [undef], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
 WARN: aborted backup of same type exists, will be cleaned to remove invalid files and resumed
 INFO: clean backup temp path: [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [undef], strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 0, oManifestHashRef = [hash], strPathFileOp = [undef], strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = base, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 2, oManifestHashRef = [hash], strPathFileOp = base/base, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 2, oManifestHashRef = [hash], strPathFileOp = base/global, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 2, oManifestHashRef = [hash], strPathFileOp = base/path-test, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     Backup->fileNotInManifest=>: stryFile = (base/PG_VERSION, file.tmp)
DEBUG:     Backup->tmpClean: remove file [TEST_PATH]/backrest/temp/db.tmp/file.tmp
DEBUG:     Backup->tmpClean: remove file [TEST_PATH]/backrest/temp/db.tmp/base/PG_VERSION
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = full
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/base, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/global, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/path-test, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/pg_tblspc, strPathType = backup:tmp
DEBUG:     File->hashSize(): bCompressed = false, strFile = base/base/base1.txt, strHashType = <sha1>, strPathType = backup:tmp
DEBUG:     File->hashSize=>: iSize = 4, strHash = a3b357a3e395e43fcfb19bb13f3c1b5179279593
 INFO: checksum resumed file [TEST_PATH]/db/common/base/base1.txt (4B, 57%) checksum a3b357a3e395e43fcfb19bb13f3c1b5179279593
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/PG_VERSION, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/PG_VERSION, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/PG_VERSION, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common/PG_VERSION (3B, 100%) checksum e1f7a3a299f62225cba076fc6d3d6e677f303482
DEBUG:     File->hashSize(): bCompressed = false, strFile = base/global/pg_control, strHashType = <sha1>, strPathType = backup:tmp
DEBUG:     File->hashSize=>: iSize = 8192, strHash = 56fe5780b8dca9705e0c22032a83828860a21235
 INFO: checksum resumed file [TEST_PATH]/db/common/global/pg_control (8KB) checksum 56fe5780b8dca9705e0c22032a83828860a21235
DEBUG:     Backup->processManifest=>: lSizeTotal = 8199
 INFO: full backup size = 8KB
 INFO: new backup label = [BACKUP-FULL-2]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-FULL-2]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-FULL-2], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-FULL-2], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
# cluster-specific settings
[db]
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

# backup settings
[global:backup]
backup-host=127.0.0.1
backup-user=backrest

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
# cluster-specific settings
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

# backup settings
[global:backup]
archive-copy=y
start-fast=y

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-FULL-2]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-FULL-2]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="full"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"a3b357a3e395e43fcfb19bb13f3c1b5179279593","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

full backup (invalid repo)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --repo-remote-path=/bogus_path  --log-level-console=info --type=full --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=info --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=/bogus_path --stanza=db --start-fast --type=full
ERROR: [148]: remote process terminated: ERROR [148]: repo-remote-path '/bogus_path' does not exist
 INFO: backup stop

restore delta, backup '[BACKUP-FULL-2]' (add and delete files)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --delta --set=[BACKUP-FULL-2] --stanza=db restore
------------------------------------------------------------------------------------------------------------------------------------
 INFO: restore start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --delta --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --set=[BACKUP-FULL-2] --stanza=db
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = restore
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/local
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = db
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/postmaster.pid
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/PG_VERSION, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/PG_VERSION
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [BACKUP-FULL-2], strPathType = backup:cluster
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = <false>, lModificationTime = [undef], strDestinationFile = [TEST_PATH]/db/common/backup.manifest, strDestinationPathType = db:absolute, strGroup = [undef], strMode = <0640>, strSourceFile = [BACKUP-FULL-2]/backup.manifest, strSourcePathType = backup:cluster, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common/backup.manifest, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common/backup.manifest.backrest.tmp, strSourcePathType = absolute
 INFO: restore backup set [BACKUP-FULL-2]
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = [TEST_PATH]/db/common/global/pg_control, strPathType = db:absolute
DEBUG:     File->remove=>: bRemoved = true
 INFO: check/clean db path [TEST_PATH]/db/common
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 0, oManifestHashRef = [hash], strPathFileOp = [undef], strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = base, strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = deleteme, strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = global, strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = pg_tblspc, strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
 INFO: remove link [TEST_PATH]/db/common/link-test - destination changed
 INFO: remove file/link [TEST_PATH]/db/common/deleteme/deleteme.txt
 INFO: remove path [TEST_PATH]/db/common/deleteme
 INFO: set mode 0700 on [TEST_PATH]/db/common/base
 INFO: cleanup removed 1 file, 1 path
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/base, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/base
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/global, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/global
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/path-test, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/path-test
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = 0700, strPath = [TEST_PATH]/db/common/path-test, strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/pg_tblspc
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/link-test, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/link-test
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = <false>, strDestinationFile = [TEST_PATH]/db/common/link-test, strDestinationPathType = db:absolute, strSourceFile = /test, strSourcePathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     Restore->process: restore in main process
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/base/base1.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/base/base1.txt
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = [TEST_PATH]/db/common/base/base1.txt, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-FULL-2]/base/base/base1.txt, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/common/base/base1.txt.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common/base/base1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common/base/base1.txt.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/common/base/base1.txt (4B, 0%) checksum a3b357a3e395e43fcfb19bb13f3c1b5179279593
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/PG_VERSION, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/PG_VERSION
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->hashSize(): bCompressed = <false>, strFile = [TEST_PATH]/db/common/PG_VERSION, strHashType = <sha1>, strPathType = db:absolute
DEBUG:     File->hashSize=>: iSize = 3, strHash = e1f7a3a299f62225cba076fc6d3d6e677f303482
 INFO: restore file [TEST_PATH]/db/common/PG_VERSION - exists and matches backup (3B, 0%) checksum e1f7a3a299f62225cba076fc6d3d6e677f303482
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/recovery.conf, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/recovery.conf
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: wrote [TEST_PATH]/db/common/recovery.conf
 INFO: restore global/pg_control (copied last to ensure aborted restores cannot be started)
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/global/pg_control, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/global/pg_control
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-2], strDestinationFile = [TEST_PATH]/db/common/global/pg_control, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-FULL-2]/base/global/pg_control, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/common/global/pg_control.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common/global/pg_control, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common/global/pg_control.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/common/global/pg_control (8KB, 100%) checksum 56fe5780b8dca9705e0c22032a83828860a21235
DEBUG:     File->remove(): bIgnoreMissing = false, bTemp = [undef], strPath = [TEST_PATH]/db/common/backup.manifest, strPathType = db:absolute
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: restore stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/common/recovery.conf
--------------------------------------------------------
restore_command = '[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=db archive-get %f "%p"'

restore delta, force, backup '[BACKUP-FULL-2]', expect exit 115 (fail on missing PG_VERSION)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --delta --force --set=[BACKUP-FULL-2] --log-level-console=info  --stanza=db restore
------------------------------------------------------------------------------------------------------------------------------------
 INFO: restore start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --delta --force --log-level-console=info --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --set=[BACKUP-FULL-2] --stanza=db
 WARN: --delta or --force specified but unable to find 'PG_VERSION' or 'backup.manifest' in '[TEST_PATH]/db/common' to confirm that this is a valid $PGDATA directory.  --delta and --force have been disabled and if any files exist in the destination directories the restore will be aborted.
 INFO: restore backup set [BACKUP-FULL-2]
 INFO: check/clean db path [TEST_PATH]/db/common
ERROR: [115]: cannot restore to path '[TEST_PATH]/db/common' that contains files - try using --delta if this is what you intended
 INFO: restore stop

restore delta, force, backup '[BACKUP-FULL-2]' (restore succeeds with backup.manifest file)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --delta --force --set=[BACKUP-FULL-2] --log-level-console=info  --stanza=db restore
------------------------------------------------------------------------------------------------------------------------------------
 INFO: restore start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --delta --force --log-level-console=info --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --set=[BACKUP-FULL-2] --stanza=db
 INFO: restore backup set [BACKUP-FULL-2]
 INFO: check/clean db path [TEST_PATH]/db/common
 INFO: cleanup removed 1 file
 INFO: restore file [TEST_PATH]/db/common/base/base1.txt - exists and matches size 4 and modification time [MODIFICATION-TIME-1] (4B, 0%) checksum a3b357a3e395e43fcfb19bb13f3c1b5179279593
 INFO: restore file [TEST_PATH]/db/common/PG_VERSION (3B, 0%) checksum e1f7a3a299f62225cba076fc6d3d6e677f303482
 INFO: wrote [TEST_PATH]/db/common/recovery.conf
 INFO: restore global/pg_control (copied last to ensure aborted restores cannot be started)
 INFO: restore file [TEST_PATH]/db/common/global/pg_control (8KB, 100%) checksum 56fe5780b8dca9705e0c22032a83828860a21235
 INFO: restore stop

+ supplemental file: [TEST_PATH]/db/common/recovery.conf
--------------------------------------------------------
restore_command = '[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --log-level-console=info --stanza=db archive-get %f "%p"'

incr backup (invalid database version)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = incr
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
ERROR: [126]: database version = 9.3, system-id 6156904820763115222 does not match backup version = 8.0, system-id = 6156904820763115222
              HINT: are you backing up to the correct stanza?
DEBUG:     Exit::exitSafe(): iExitCode = 126, strSignal = [undef]
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

incr backup (invalid system id)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = incr
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
ERROR: [126]: database version = 9.3, system-id 6156904820763115222 does not match backup version = 9.3, system-id = 6999999999999999999
              HINT: are you backing up to the correct stanza?
DEBUG:     Exit::exitSafe(): iExitCode = 126, strSignal = [undef]
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

incr backup (invalid control version)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = incr
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
ERROR: [126]: database control-version = 937, catalog-version 201306121 does not match backup control-version = 842, catalog-version = 201306121
              HINT: this may be a symptom of database or repository corruption!
DEBUG:     Exit::exitSafe(): iExitCode = 126, strSignal = [undef]
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

incr backup (invalid catalog version)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = incr
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
ERROR: [126]: database control-version = 937, catalog-version 201306121 does not match backup control-version = 937, catalog-version = 197208141
              HINT: this may be a symptom of database or repository corruption!
DEBUG:     Exit::exitSafe(): iExitCode = 126, strSignal = [undef]
 INFO: backup stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

incr backup (invalid path in pg_tblspc)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --log-level-console=info --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=info --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
ERROR: [144]: /pg_tblspc/path is not a symlink - pg_tblspc should contain only symlinks
 INFO: backup stop

incr backup (invalid relative link in pg_tblspc)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --log-level-console=info --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=info --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
ERROR: [145]: tablespace symlink ../invalid_tblspc must be absolute
 INFO: backup stop

incr backup (invalid tablespace in $PGDATA)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --log-level-console=info --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=info --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
ERROR: [146]: tablespace symlink [TEST_PATH]/db/common/invalid_tblspc must not be in $PGDATA
 INFO: backup stop

incr backup (add tablespace 1)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = incr
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 1
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts1, strLevel = tablespace/1
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = incr
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/PG_VERSION to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/base/base1.txt to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/global/pg_control to [BACKUP-FULL-2]
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/badchecksum.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/badchecksum.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/badchecksum.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/common/badchecksum.txt (11B, 61%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/1/tablespace1.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1]/tablespace1.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1/tablespace1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1]/tablespace1.txt (7B, 100%) checksum d85de07d6421d90aa9191c11c889bfde43680f0f
DEBUG:     Backup->processManifest=>: lSizeTotal = 18
 INFO: incr backup size = 18B
 INFO: new backup label = [BACKUP-INCR-1]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-1]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-INCR-1], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-INCR-1], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-INCR-1], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-INCR-1], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-1]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
# cluster-specific settings
[db]
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

# backup settings
[global:backup]
backup-host=127.0.0.1
backup-user=backrest

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
# cluster-specific settings
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

# backup settings
[global:backup]
archive-copy=y
start-fast=y

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-1]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-INCR-1]"
backup-prior="[BACKUP-FULL-2]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="incr"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common"}
tablespace/1={"link":"1","path":"[TEST_PATH]/db/tablespace/ts1"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"a3b357a3e395e43fcfb19bb13f3c1b5179279593","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/1={"destination":"[TEST_PATH]/db/tablespace/ts1","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/1:file]
tablespace1.txt={"checksum":"d85de07d6421d90aa9191c11c889bfde43680f0f","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/1:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

incr backup (resume and add tablespace 2)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --stanza=db backup --test --test-delay=0.2 --test-point=backup-resume=y
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --test --test-delay=0.2 --test-point=backup-resume=y
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
 WARN: backup [BACKUP-INCR-1] is missing from the repository - removed from backup.info
DEBUG:     BackupInfo->delete(): strBackupLabel = [BACKUP-INCR-1]
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = incr
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 1
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts1, strLevel = tablespace/1
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1], strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
 WARN: aborted backup of same type exists, will be cleaned to remove invalid files and resumed
 INFO: clean backup temp path: [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [undef], strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 0, oManifestHashRef = [hash], strPathFileOp = [undef], strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = base, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = tablespace, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     File->manifestRecurse(): iDepth = 2, oManifestHashRef = [hash], strPathFileOp = tablespace/1, strPathOp = [TEST_PATH]/backrest/temp/db.tmp, strPathType = backup:tmp
DEBUG:     Backup->fileNotInManifest=>: stryFile = ()
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = incr
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/PG_VERSION to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/base/base1.txt to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/global/pg_control to [BACKUP-FULL-2]
DEBUG:     File->hashSize(): bCompressed = false, strFile = base/badchecksum.txt, strHashType = <sha1>, strPathType = backup:tmp
DEBUG:     File->hashSize=>: iSize = 11, strHash = f927212cd08d11a42a666b2f04235398e9ceeb51
 WARN: resumed backup file base/badchecksum.txt should have checksum bogus but actually has checksum f927212cd08d11a42a666b2f04235398e9ceeb51.  The file will be recopied and backup will continue but this may be an issue unless the backup temp path is known to be corrupted.
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/badchecksum.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/badchecksum.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/badchecksum.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common/badchecksum.txt (11B, 44%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
DEBUG:     File->hashSize(): bCompressed = false, strFile = tablespace/1/tablespace1.txt, strHashType = <sha1>, strPathType = backup:tmp
DEBUG:     File->hashSize=>: iSize = 7, strHash = d85de07d6421d90aa9191c11c889bfde43680f0f
 INFO: checksum resumed file [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1]/tablespace1.txt (7B, 72%) checksum d85de07d6421d90aa9191c11c889bfde43680f0f
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2/[TS_PATH-1]/tablespace2.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts2/[TS_PATH-1]/tablespace2.txt (7B, 100%) checksum dc7f76e43c46101b47acc55ae4d593a9e6983578
DEBUG:     Backup->processManifest=>: lSizeTotal = 25
 INFO: incr backup size = 25B
 INFO: new backup label = [BACKUP-INCR-2]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-2]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-INCR-2], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-INCR-2], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-INCR-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-INCR-2], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-2]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
# cluster-specific settings
[db]
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

# backup settings
[global:backup]
backup-host=127.0.0.1
backup-user=backrest

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
# cluster-specific settings
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

# backup settings
[global:backup]
archive-copy=y
start-fast=y

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-2]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-INCR-2]"
backup-prior="[BACKUP-FULL-2]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="incr"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common"}
tablespace/1={"link":"1","path":"[TEST_PATH]/db/tablespace/ts1"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"a3b357a3e395e43fcfb19bb13f3c1b5179279593","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/1={"destination":"[TEST_PATH]/db/tablespace/ts1","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/1:file]
tablespace1.txt={"checksum":"d85de07d6421d90aa9191c11c889bfde43680f0f","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/1:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

diff backup (cannot resume - new diff)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=diff --stanza=db backup --test --test-delay=0.2 --test-point=backup-noresume=y
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --test --test-delay=0.2 --test-point=backup-noresume=y --type=diff
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
 WARN: backup [BACKUP-INCR-2] is missing from the repository - removed from backup.info
DEBUG:     BackupInfo->delete(): strBackupLabel = [BACKUP-INCR-2]
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = diff
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = <false>, bFull = true, bIncremental = <false>
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 1
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts1, strLevel = tablespace/1
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1], strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
 WARN: aborted backup exists, but cannot be resumed (new backup-type 'diff' does not match aborted backup-type 'incr') - will be dropped and recreated
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = diff
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/PG_VERSION to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/base/base1.txt to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/global/pg_control to [BACKUP-FULL-2]
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/badchecksum.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/badchecksum.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/badchecksum.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/common/badchecksum.txt (11B, 44%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/1/tablespace1.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1]/tablespace1.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1/tablespace1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1]/tablespace1.txt (7B, 72%) checksum d85de07d6421d90aa9191c11c889bfde43680f0f
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2/[TS_PATH-1]/tablespace2.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts2/[TS_PATH-1]/tablespace2.txt (7B, 100%) checksum dc7f76e43c46101b47acc55ae4d593a9e6983578
DEBUG:     Backup->processManifest=>: lSizeTotal = 25
 INFO: diff backup size = 25B
 INFO: new backup label = [BACKUP-DIFF-1]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-1]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-DIFF-1], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-DIFF-1], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-DIFF-1], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-DIFF-1], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-1]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
# cluster-specific settings
[db]
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

# backup settings
[global:backup]
backup-host=127.0.0.1
backup-user=backrest

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
# cluster-specific settings
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

# backup settings
[global:backup]
archive-copy=y
start-fast=y

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-1]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-DIFF-1]"
backup-prior="[BACKUP-FULL-2]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="diff"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common"}
tablespace/1={"link":"1","path":"[TEST_PATH]/db/tablespace/ts1"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"a3b357a3e395e43fcfb19bb13f3c1b5179279593","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/1={"destination":"[TEST_PATH]/db/tablespace/ts1","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/1:file]
tablespace1.txt={"checksum":"d85de07d6421d90aa9191c11c889bfde43680f0f","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/1:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

diff backup (cannot resume - disabled)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --no-resume --type=diff --stanza=db backup --test --test-delay=0.2 --test-point=backup-noresume=y
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --no-resume --stanza=db --start-fast --test --test-delay=0.2 --test-point=backup-noresume=y --type=diff
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
 WARN: backup [BACKUP-DIFF-1] is missing from the repository - removed from backup.info
DEBUG:     BackupInfo->delete(): strBackupLabel = [BACKUP-DIFF-1]
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = diff
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = <false>, bFull = true, bIncremental = <false>
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 1
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts1, strLevel = tablespace/1
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1], strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
 WARN: aborted backup exists, but cannot be resumed (resume is disabled) - will be dropped and recreated
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = diff
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/PG_VERSION to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/base/base1.txt to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common/global/pg_control to [BACKUP-FULL-2]
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/badchecksum.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common/badchecksum.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/badchecksum.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/common/badchecksum.txt (11B, 44%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/1/tablespace1.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1]/tablespace1.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1/tablespace1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/1
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts1/[TS_PATH-1]/tablespace1.txt (7B, 72%) checksum d85de07d6421d90aa9191c11c889bfde43680f0f
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2/[TS_PATH-1]/tablespace2.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts2/[TS_PATH-1]/tablespace2.txt (7B, 100%) checksum dc7f76e43c46101b47acc55ae4d593a9e6983578
DEBUG:     Backup->processManifest=>: lSizeTotal = 25
 INFO: diff backup size = 25B
 INFO: new backup label = [BACKUP-DIFF-2]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-2]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-DIFF-2], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-DIFF-2], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-2]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
# cluster-specific settings
[db]
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

# backup settings
[global:backup]
backup-host=127.0.0.1
backup-user=backrest

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
# cluster-specific settings
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

# backup settings
[global:backup]
archive-copy=y
start-fast=y

# backrest command
[global:command]
cmd-remote=[BACKREST_BIN]

# general settings for all operations
[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

# file and console log settings
[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-2]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-DIFF-2]"
backup-prior="[BACKUP-FULL-2]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="diff"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common"}
tablespace/1={"link":"1","path":"[TEST_PATH]/db/tablespace/ts1"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"a3b357a3e395e43fcfb19bb13f3c1b5179279593","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/1={"destination":"[TEST_PATH]/db/tablespace/ts1","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/1:file]
tablespace1.txt={"checksum":"d85de07d6421d90aa9191c11c889bfde43680f0f","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/1:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

restore, backup '[BACKUP-DIFF-2]', expect exit 115 (fail on used path)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --set=[BACKUP-DIFF-2] --stanza=db restore
------------------------------------------------------------------------------------------------------------------------------------
 INFO: restore start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --set=[BACKUP-DIFF-2] --stanza=db
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = restore
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/local
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = db
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/postmaster.pid
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->exists(): strPath = [BACKUP-DIFF-2], strPathType = backup:cluster
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = <false>, lModificationTime = [undef], strDestinationFile = [TEST_PATH]/db/common/backup.manifest, strDestinationPathType = db:absolute, strGroup = [undef], strMode = <0640>, strSourceFile = [BACKUP-DIFF-2]/backup.manifest, strSourcePathType = backup:cluster, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common/backup.manifest, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common/backup.manifest.backrest.tmp, strSourcePathType = absolute
 INFO: restore backup set [BACKUP-DIFF-2]
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = [TEST_PATH]/db/common/global/pg_control, strPathType = db:absolute
DEBUG:     File->remove=>: bRemoved = true
 INFO: check/clean db path [TEST_PATH]/db/common
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 0, oManifestHashRef = [hash], strPathFileOp = [undef], strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = base, strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = global, strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = path-test, strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = pg_tblspc, strPathOp = [TEST_PATH]/db/common, strPathType = db:absolute
ERROR: [115]: cannot restore to path '[TEST_PATH]/db/common' that contains files - try using --delta if this is what you intended
DEBUG:     Exit::exitSafe(): iExitCode = 115, strSignal = [undef]
 INFO: restore stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

restore, backup '[BACKUP-DIFF-2]', expect exit 104 (fail on undef format)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --set=[BACKUP-DIFF-2] --stanza=db restore
------------------------------------------------------------------------------------------------------------------------------------
 INFO: restore start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --set=[BACKUP-DIFF-2] --stanza=db
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = restore
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/local
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = db
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/postmaster.pid
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->exists(): strPath = [BACKUP-DIFF-2], strPathType = backup:cluster
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = <false>, lModificationTime = [undef], strDestinationFile = [TEST_PATH]/db/common/backup.manifest, strDestinationPathType = db:absolute, strGroup = [undef], strMode = <0640>, strSourceFile = [BACKUP-DIFF-2]/backup.manifest, strSourcePathType = backup:cluster, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common/backup.manifest, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common/backup.manifest.backrest.tmp, strSourcePathType = absolute
ERROR: [104]: format of [TEST_PATH]/db/common/backup.manifest is 0 but 4 is required
DEBUG:     Exit::exitSafe(): iExitCode = 104, strSignal = [undef]
 INFO: restore stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

restore, backup '[BACKUP-DIFF-2]', expect exit 104 (fail on mismatch format)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --set=[BACKUP-DIFF-2] --stanza=db restore
------------------------------------------------------------------------------------------------------------------------------------
 INFO: restore start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --set=[BACKUP-DIFF-2] --stanza=db
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = restore
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/local
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = db
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common/postmaster.pid, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common/postmaster.pid
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->exists(): strPath = [BACKUP-DIFF-2], strPathType = backup:cluster
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = <false>, lModificationTime = [undef], strDestinationFile = [TEST_PATH]/db/common/backup.manifest, strDestinationPathType = db:absolute, strGroup = [undef], strMode = <0640>, strSourceFile = [BACKUP-DIFF-2]/backup.manifest, strSourcePathType = backup:cluster, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common/backup.manifest, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common/backup.manifest.backrest.tmp, strSourcePathType = absolute
ERROR: [104]: format of [TEST_PATH]/db/common/backup.manifest is 0 but 4 is required
DEBUG:     Exit::exitSafe(): iExitCode = 104, strSignal = [undef]
 INFO: restore stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

restore, backup '[BACKUP-DIFF-2]', remap (remap all paths)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --set=[BACKUP-DIFF-2] --stanza=db restore
------------------------------------------------------------------------------------------------------------------------------------
 INFO: restore start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --set=[BACKUP-DIFF-2] --stanza=db --tablespace-map=1=[TEST_PATH]/db/tablespace/ts1-2 --tablespace-map=2=[TEST_PATH]/db/tablespace/ts2-2
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = restore
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/local
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = db
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/postmaster.pid, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/postmaster.pid
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->exists(): strPath = [BACKUP-DIFF-2], strPathType = backup:cluster
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = <false>, lModificationTime = [undef], strDestinationFile = [TEST_PATH]/db/common-2/backup.manifest, strDestinationPathType = db:absolute, strGroup = [undef], strMode = <0640>, strSourceFile = [BACKUP-DIFF-2]/backup.manifest, strSourcePathType = backup:cluster, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common-2/backup.manifest, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common-2/backup.manifest.backrest.tmp, strSourcePathType = absolute
 INFO: restore backup set [BACKUP-DIFF-2]
 INFO: remap base path to [TEST_PATH]/db/common-2
 INFO: remap tablespace 1 to [TEST_PATH]/db/tablespace/ts1-2
 INFO: remap tablespace 2 to [TEST_PATH]/db/tablespace/ts2-2
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = [TEST_PATH]/db/common-2/global/pg_control, strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/global/pg_control, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/global/pg_control
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->remove=>: bRemoved = false
 INFO: check/clean db path [TEST_PATH]/db/common-2
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 0, oManifestHashRef = [hash], strPathFileOp = [undef], strPathOp = [TEST_PATH]/db/common-2, strPathType = db:absolute
 INFO: check/clean db path [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: check/clean db path [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/base, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = 0700, strPath = [TEST_PATH]/db/common-2/base, strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/global, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/global
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = 0700, strPath = [TEST_PATH]/db/common-2/global, strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/path-test, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/path-test
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = 0700, strPath = [TEST_PATH]/db/common-2/path-test, strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = 0700, strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/link-test, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/link-test
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = <false>, strDestinationFile = [TEST_PATH]/db/common-2/link-test, strDestinationPathType = db:absolute, strSourceFile = /test, strSourcePathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc/1, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/1
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = <false>, strDestinationFile = [TEST_PATH]/db/common-2/pg_tblspc/1, strDestinationPathType = db:absolute, strSourceFile = [TEST_PATH]/db/tablespace/ts1-2, strSourcePathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc/2, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/2
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = <false>, strDestinationFile = [TEST_PATH]/db/common-2/pg_tblspc/2, strDestinationPathType = db:absolute, strSourceFile = [TEST_PATH]/db/tablespace/ts2-2, strSourcePathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = 0700, strPath = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = 0700, strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/tablespace/ts1-2, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/tablespace/ts1-2
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/tablespace/ts2-2, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/tablespace/ts2-2
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     Restore->process: restore in main process
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/badchecksum.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/badchecksum.txt
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = [TEST_PATH]/db/common-2/badchecksum.txt, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-DIFF-2]/base/badchecksum.txt, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/common-2/badchecksum.txt.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common-2/badchecksum.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common-2/badchecksum.txt.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/common-2/badchecksum.txt (11B, 0%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/base/base1.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/base/base1.txt
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = [TEST_PATH]/db/common-2/base/base1.txt, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-FULL-2]/base/base/base1.txt, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/common-2/base/base1.txt.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common-2/base/base1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common-2/base/base1.txt.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/common-2/base/base1.txt (4B, 0%) checksum a3b357a3e395e43fcfb19bb13f3c1b5179279593
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/PG_VERSION, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/PG_VERSION
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = [TEST_PATH]/db/common-2/PG_VERSION, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-FULL-2]/base/PG_VERSION, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/common-2/PG_VERSION.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common-2/PG_VERSION, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common-2/PG_VERSION.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/common-2/PG_VERSION (3B, 0%) checksum e1f7a3a299f62225cba076fc6d3d6e677f303482
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]/tablespace1.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]/tablespace1.txt
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]/tablespace1.txt, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-DIFF-2]/tablespace/1/tablespace1.txt, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]/tablespace1.txt.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]/tablespace1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]/tablespace1.txt.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]/tablespace1.txt (7B, 0%) checksum d85de07d6421d90aa9191c11c889bfde43680f0f
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-DIFF-2]/tablespace/2/tablespace2.txt, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt (7B, 0%) checksum dc7f76e43c46101b47acc55ae4d593a9e6983578
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/recovery.conf, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/recovery.conf
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: wrote [TEST_PATH]/db/common-2/recovery.conf
 INFO: restore global/pg_control (copied last to ensure aborted restores cannot be started)
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/global/pg_control, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/global/pg_control
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-2], strDestinationFile = [TEST_PATH]/db/common-2/global/pg_control, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-FULL-2]/base/global/pg_control, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/common-2/global/pg_control.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common-2/global/pg_control, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common-2/global/pg_control.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/common-2/global/pg_control (8KB, 100%) checksum 56fe5780b8dca9705e0c22032a83828860a21235
DEBUG:     File->remove(): bIgnoreMissing = false, bTemp = [undef], strPath = [TEST_PATH]/db/common-2/backup.manifest, strPathType = db:absolute
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: restore stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/common-2/recovery.conf
----------------------------------------------------------
restore_command = '[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=db archive-get %f "%p"'

restore delta, backup '[BACKUP-DIFF-2]', remap (ensure file in tblspc root remains after --delta)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --delta --set=[BACKUP-DIFF-2] --log-level-console=info  --stanza=db restore
------------------------------------------------------------------------------------------------------------------------------------
 INFO: restore start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --delta --log-level-console=info --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --set=[BACKUP-DIFF-2] --stanza=db --tablespace-map=1=[TEST_PATH]/db/tablespace/ts1-2 --tablespace-map=2=[TEST_PATH]/db/tablespace/ts2-2
 INFO: restore backup set [BACKUP-DIFF-2]
 INFO: remap base path to [TEST_PATH]/db/common-2
 INFO: remap tablespace 1 to [TEST_PATH]/db/tablespace/ts1-2
 INFO: remap tablespace 2 to [TEST_PATH]/db/tablespace/ts2-2
 INFO: check/clean db path [TEST_PATH]/db/common-2
 INFO: check/clean db path [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]
 INFO: check/clean db path [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]
 INFO: cleanup removed 1 file
 INFO: restore file [TEST_PATH]/db/common-2/badchecksum.txt - exists and matches backup (11B, 0%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
 INFO: restore file [TEST_PATH]/db/common-2/base/base1.txt - exists and matches backup (4B, 0%) checksum a3b357a3e395e43fcfb19bb13f3c1b5179279593
 INFO: restore file [TEST_PATH]/db/common-2/PG_VERSION - exists and matches backup (3B, 0%) checksum e1f7a3a299f62225cba076fc6d3d6e677f303482
 INFO: restore file [TEST_PATH]/db/tablespace/ts1-2/[TS_PATH-1]/tablespace1.txt - exists and matches backup (7B, 0%) checksum d85de07d6421d90aa9191c11c889bfde43680f0f
 INFO: restore file [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt - exists and matches backup (7B, 0%) checksum dc7f76e43c46101b47acc55ae4d593a9e6983578
 INFO: wrote [TEST_PATH]/db/common-2/recovery.conf
 INFO: restore global/pg_control (copied last to ensure aborted restores cannot be started)
 INFO: restore file [TEST_PATH]/db/common-2/global/pg_control (8KB, 100%) checksum 56fe5780b8dca9705e0c22032a83828860a21235
 INFO: restore stop

+ supplemental file: [TEST_PATH]/db/common-2/recovery.conf
----------------------------------------------------------
restore_command = '[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --log-level-console=info --stanza=db archive-get %f "%p"'

incr backup (add files and remove tablespace 2)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common-2 --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = incr
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-DIFF-2]
 INFO: last backup label = [BACKUP-DIFF-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common-2
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common-2, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2-2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = incr
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/PG_VERSION to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/badchecksum.txt to [BACKUP-DIFF-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/base/base1.txt to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/global/pg_control to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt to [BACKUP-DIFF-2]
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/base/base2.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/base/base2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base/base, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/base/base, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/base/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/common-2/base/base2.txt (5B, 38%) checksum 09b5e31766be1dba1ec27de82f975c1b6eea2a92
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2b.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2b.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2b.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2b.txt (8B, 100%) checksum e324463005236d83e6e54795dbddd20a74533bf3
DEBUG:     Backup->processManifest=>: lSizeTotal = 13
 INFO: incr backup size = 13B
 INFO: new backup label = [BACKUP-INCR-3]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-3]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-INCR-3], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-INCR-3], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-2]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
[db]
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

[db:restore:tablespace-map]
1=[TEST_PATH]/db/tablespace/ts1-2
2=[TEST_PATH]/db/tablespace/ts2-2

[global:backup]
backup-host=127.0.0.1
backup-user=backrest

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

[global:backup]
archive-copy=y
start-fast=y

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-3]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-INCR-3]"
backup-prior="[BACKUP-DIFF-2]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="incr"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common-2"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2-2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-DIFF-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"a3b357a3e395e43fcfb19bb13f3c1b5179279593","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base2.txt={"checksum":"09b5e31766be1dba1ec27de82f975c1b6eea2a92","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2-2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-DIFF-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
tablespace2b.txt={"checksum":"e324463005236d83e6e54795dbddd20a74533bf3","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

incr backup (update files)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common-2 --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = incr
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-INCR-3]
 INFO: last backup label = [BACKUP-INCR-3], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common-2
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common-2, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2-2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = incr
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/PG_VERSION to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/badchecksum.txt to [BACKUP-DIFF-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/base/base2.txt to [BACKUP-INCR-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/global/pg_control to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt to [BACKUP-DIFF-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2b.txt to [BACKUP-INCR-3]
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base1.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/base/base1.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/base/base1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base/base, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/base/base, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/base/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/common-2/base/base1.txt (8B, 100%) checksum 9a53d532e27785e681766c98516a5e93f096a501
DEBUG:     Backup->processManifest=>: lSizeTotal = 8
 INFO: incr backup size = 8B
 INFO: new backup label = [BACKUP-INCR-4]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-4]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-INCR-4], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-INCR-4], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-4]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-2]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
[db]
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

[db:restore:tablespace-map]
1=[TEST_PATH]/db/tablespace/ts1-2
2=[TEST_PATH]/db/tablespace/ts2-2

[global:backup]
backup-host=127.0.0.1
backup-user=backrest

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

[global:backup]
archive-copy=y
start-fast=y

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-4]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-INCR-4]"
backup-prior="[BACKUP-INCR-3]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="incr"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common-2"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2-2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-DIFF-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"9a53d532e27785e681766c98516a5e93f096a501","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base2.txt={"checksum":"09b5e31766be1dba1ec27de82f975c1b6eea2a92","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-INCR-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2-2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-DIFF-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
tablespace2b.txt={"checksum":"e324463005236d83e6e54795dbddd20a74533bf3","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-INCR-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

diff backup (no updates)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=diff --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common-2 --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --type=diff
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = diff
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = <false>, bFull = true, bIncremental = <false>
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common-2
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common-2, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2-2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = diff
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/PG_VERSION to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/global/pg_control to [BACKUP-FULL-2]
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/badchecksum.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/badchecksum.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/badchecksum.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/common-2/badchecksum.txt (11B, 28%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base1.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/base/base1.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/base/base1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base/base, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/base/base, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/base/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/common-2/base/base1.txt (8B, 48%) checksum 9a53d532e27785e681766c98516a5e93f096a501
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/base/base2.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/base/base2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common-2/base/base2.txt (5B, 61%) checksum 09b5e31766be1dba1ec27de82f975c1b6eea2a92
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2b.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2b.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2b.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2b.txt (8B, 82%) checksum e324463005236d83e6e54795dbddd20a74533bf3
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt (7B, 100%) checksum dc7f76e43c46101b47acc55ae4d593a9e6983578
DEBUG:     Backup->processManifest=>: lSizeTotal = 39
 INFO: diff backup size = 39B
 INFO: new backup label = [BACKUP-DIFF-3]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-3]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-DIFF-3], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-DIFF-3], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-4]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-2]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
[db]
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

[db:restore:tablespace-map]
1=[TEST_PATH]/db/tablespace/ts1-2
2=[TEST_PATH]/db/tablespace/ts2-2

[global:backup]
backup-host=127.0.0.1
backup-user=backrest

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

[global:backup]
archive-copy=y
start-fast=y

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-3]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-DIFF-3]"
backup-prior="[BACKUP-FULL-2]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="diff"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common-2"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2-2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"9a53d532e27785e681766c98516a5e93f096a501","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base2.txt={"checksum":"09b5e31766be1dba1ec27de82f975c1b6eea2a92","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2-2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
tablespace2b.txt={"checksum":"e324463005236d83e6e54795dbddd20a74533bf3","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

incr backup (remove files - but won't affect manifest)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --stanza=db backup --test --test-delay=1 --test-point=manifest-build=y
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common-2 --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --test --test-delay=1 --test-point=manifest-build=y
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = incr
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-DIFF-3]
 INFO: last backup label = [BACKUP-DIFF-3], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common-2
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common-2, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2-2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = incr
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/PG_VERSION to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/badchecksum.txt to [BACKUP-DIFF-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/base/base1.txt to [BACKUP-DIFF-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/base/base2.txt to [BACKUP-DIFF-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/global/pg_control to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt to [BACKUP-DIFF-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2b.txt to [BACKUP-DIFF-3]
DEBUG:     Backup->processManifest=>: lSizeTotal = 0
 INFO: incr backup size = 0B
 INFO: new backup label = [BACKUP-INCR-5]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-5]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-INCR-5], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-INCR-5], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-INCR-5], [BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-INCR-5], [BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-5]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-4]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-2]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
[db]
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

[db:restore:tablespace-map]
1=[TEST_PATH]/db/tablespace/ts1-2
2=[TEST_PATH]/db/tablespace/ts2-2

[global:backup]
backup-host=127.0.0.1
backup-user=backrest

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

[global:backup]
archive-copy=y
start-fast=y

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-INCR-5]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-INCR-5]"
backup-prior="[BACKUP-DIFF-3]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="incr"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common-2"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2-2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-DIFF-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"9a53d532e27785e681766c98516a5e93f096a501","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-DIFF-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base2.txt={"checksum":"09b5e31766be1dba1ec27de82f975c1b6eea2a92","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-DIFF-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2-2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-DIFF-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
tablespace2b.txt={"checksum":"e324463005236d83e6e54795dbddd20a74533bf3","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-DIFF-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

diff backup (remove files during backup)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=diff --stanza=db backup --test --test-delay=1 --test-point=manifest-build=y
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common-2 --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --test --test-delay=1 --test-point=manifest-build=y --type=diff
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = diff
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = <false>, bFull = true, bIncremental = <false>
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-2]
 INFO: last backup label = [BACKUP-FULL-2], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common-2
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common-2, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2-2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = diff
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/PG_VERSION to [BACKUP-FULL-2]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/global/pg_control to [BACKUP-FULL-2]
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/badchecksum.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/badchecksum.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/badchecksum.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/base, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/common-2/badchecksum.txt (11B, 35%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/base/base2.txt, strSourcePathType = db:absolute, strUser = [undef]
 INFO: skip file removed by database: [TEST_PATH]/db/common-2/base/base2.txt
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2c.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2c.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2c.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2c.txt (12B, 77%) checksum dfcb8679956b734706cf87259d50c88f83e80e66
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt (7B, 100%) checksum dc7f76e43c46101b47acc55ae4d593a9e6983578
DEBUG:     Backup->processManifest=>: lSizeTotal = 31
 INFO: diff backup size = 31B
 INFO: new backup label = [BACKUP-DIFF-4]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-4]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-DIFF-4], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-DIFF-4], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-DIFF-4], [BACKUP-INCR-5], [BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-DIFF-4], [BACKUP-INCR-5], [BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-4]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-5]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-4]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-2]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
[db]
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

[db:restore:tablespace-map]
1=[TEST_PATH]/db/tablespace/ts1-2
2=[TEST_PATH]/db/tablespace/ts2-2

[global:backup]
backup-host=127.0.0.1
backup-user=backrest

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

[global:backup]
archive-copy=y
start-fast=y

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-4]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-DIFF-4]"
backup-prior="[BACKUP-FULL-2]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="diff"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common-2"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2-2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-2]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2-2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
tablespace2c.txt={"checksum":"dfcb8679956b734706cf87259d50c88f83e80e66","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

full backup
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=full --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common-2 --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --type=full
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = full
DEBUG:     Backup->typeFind=>: strLabel = [undef]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common-2
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [undef], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common-2, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [undef], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2-2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = full
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/base, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/global, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/path-test, strPathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = base/pg_tblspc, strPathType = backup:tmp
DEBUG:     File->linkCreate(): bHard = false, bPathCreate = true, bRelative = true, strDestinationFile = base/pg_tblspc/2, strDestinationPathType = backup:tmp, strSourceFile = tablespace/2, strSourcePathType = backup:tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base/pg_tblspc, strPathType = backup:absolute
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/badchecksum.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/badchecksum.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/badchecksum.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common-2/badchecksum.txt (11B, 26%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base1.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/base/base1.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/base/base1.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common-2/base/base1.txt (9B, 47%) checksum 7579ada0808d7f98087a0a586d0df9de009cdc33
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/PG_VERSION, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/PG_VERSION, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/PG_VERSION, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common-2/PG_VERSION (3B, 54%) checksum e1f7a3a299f62225cba076fc6d3d6e677f303482
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2c.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2c.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2c.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2c.txt (12B, 83%) checksum dfcb8679956b734706cf87259d50c88f83e80e66
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = tablespace/2/tablespace2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/tablespace/2/tablespace2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt (7B, 100%) checksum dc7f76e43c46101b47acc55ae4d593a9e6983578
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-2], strDestinationFile = base/global/pg_control, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/global/pg_control, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/global/pg_control, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
 INFO: backup file [TEST_PATH]/db/common-2/global/pg_control (8KB) checksum 56fe5780b8dca9705e0c22032a83828860a21235
DEBUG:     Backup->processManifest=>: lSizeTotal = 8234
 INFO: full backup size = 8KB
 INFO: new backup label = [BACKUP-FULL-3]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-FULL-3]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-FULL-3], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-FULL-3], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-3], [BACKUP-DIFF-4], [BACKUP-INCR-5], [BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-3], [BACKUP-DIFF-4], [BACKUP-INCR-5], [BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-4]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-5]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-4]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-2]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
[db]
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

[db:restore:tablespace-map]
1=[TEST_PATH]/db/tablespace/ts1-2
2=[TEST_PATH]/db/tablespace/ts2-2

[global:backup]
backup-host=127.0.0.1
backup-user=backrest

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

[global:backup]
archive-copy=y
start-fast=y

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-FULL-3]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-FULL-3]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="full"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common-2"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2-2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"7579ada0808d7f98087a0a586d0df9de009cdc33","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2-2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
tablespace2c.txt={"checksum":"dfcb8679956b734706cf87259d50c88f83e80e66","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=db expire --log-level-console=info --retention-full=1
------------------------------------------------------------------------------------------------------------------------------------
 INFO: expire start: --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --log-level-console=info --log-level-file=trace --repo-path=[TEST_PATH]/local --retention-full=1 --stanza=db
ERROR: [147]: backup and expire commands must run on the backup host
 INFO: expire stop

diff backup (add files)
> [BACKREST_BIN] --config=[TEST_PATH]/backrest/pg_backrest.conf --no-online --type=diff --stanza=db backup
------------------------------------------------------------------------------------------------------------------------------------
 INFO: backup start: --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --config-remote=[TEST_PATH]/db/pg_backrest.conf --db-host=127.0.0.1 --db-path=[TEST_PATH]/db/common-2 --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --db-user=vagrant --log-level-console=debug --log-level-file=trace --no-online --repo-path=[TEST_PATH]/backrest --repo-remote-path=[TEST_PATH]/backrest --stanza=db --start-fast --type=diff
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = backup
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/backrest
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-1]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no vagrant@127.0.0.1 '[BACKREST_BIN] --command=backup --config=[TEST_PATH]/db/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [undef], strPathType = backup:cluster
DEBUG:     File->exists(): strPath = [undef], strPathType = backup:cluster
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/backup/db
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     Backup->typeFind(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db, strType = diff
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = <false>, bFull = true, bIncremental = <false>
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-FULL-3], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-FULL-3], [BACKUP-FULL-2])
DEBUG:     Backup->typeFind=>: strLabel = [BACKUP-FULL-3]
 INFO: last backup label = [BACKUP-FULL-3], version = [VERSION-1]
DEBUG:     Db->info(): oFile = [object], strDbPath = [TEST_PATH]/db/common-2
DEBUG:     Db->info=>: fDbVersion = 9.3, iCatalogVersion = 201306121, iControlVersion = 937, ullDbSysId = 6156904820763115222
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/postmaster.pid, strPathType = db:absolute
DEBUG:     File->exists=>: bExists = false
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [undef], strDbClusterPath = [TEST_PATH]/db/common-2, strLevel = [undef]
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     Manifest->build: found tablespace 2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     Manifest->build(): bOnline = false, oFile = [object], oLastManifest = [object], oTablespaceMapRef = [hash], strDbClusterPath = [TEST_PATH]/db/tablespace/ts2-2, strLevel = tablespace/2
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->wait(): strPathType = db:absolute
DEBUG:     Backup->process: create temp backup path [TEST_PATH]/backrest/temp/db.tmp
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [undef], strPathType = backup:tmp
DEBUG:     Backup->processManifest(): bCompress = false, bHardLink = false, oBackupManifest = [object], strType = diff
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/PG_VERSION to [BACKUP-FULL-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/badchecksum.txt to [BACKUP-FULL-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/base/base1.txt to [BACKUP-FULL-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/common-2/global/pg_control to [BACKUP-FULL-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2.txt to [BACKUP-FULL-3]
DEBUG:     Backup->processManifest: reference [TEST_PATH]/db/tablespace/ts2-2/[TS_PATH-1]/tablespace2c.txt to [BACKUP-FULL-3]
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = false, bDestinationPathCreate = true, bIgnoreMissingSource = true, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = base/base/base2.txt, strDestinationPathType = backup:tmp, strGroup = [undef], strMode = <0640>, strSourceFile = [TEST_PATH]/db/common-2/base/base2.txt, strSourcePathType = db:absolute, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = true, strDestinationFile = [TEST_PATH]/backrest/temp/db.tmp/base/base/base2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/backrest/temp/db.tmp/file.tmp, strSourcePathType = absolute
DEBUG:     File->pathCreate(): bIgnoreExists = true, strMode = <0750>, strPath = [TEST_PATH]/backrest/temp/db.tmp/base/base, strPathType = absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/backrest/temp/db.tmp/base/base, strPathType = absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/backrest/temp/db.tmp/base/base
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: backup file [TEST_PATH]/db/common-2/base/base2.txt (9B, 100%) checksum cafac3c59553f2cfde41ce2e62e7662295f108c0
DEBUG:     Backup->processManifest=>: lSizeTotal = 9
 INFO: diff backup size = 9B
 INFO: new backup label = [BACKUP-DIFF-5]
DEBUG:     Backup->process: move [TEST_PATH]/backrest/temp/db.tmp to [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-5]
DEBUG:     File->move(): bDestinationPathCreate = <false>, strDestinationFile = [BACKUP-DIFF-5], strDestinationPathType = backup:cluster, strSourceFile = [undef], strSourcePathType = backup:tmp
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = latest, strPathType = backup:cluster
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     File->linkCreate(): bHard = <false>, bPathCreate = <true>, bRelative = true, strDestinationFile = latest, strDestinationPathType = backup:cluster, strSourceFile = [BACKUP-DIFF-5], strSourcePathType = backup:cluster
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = <0750>, strPath = [TEST_PATH]/backrest/backup/db, strPathType = backup:absolute
 INFO: backup stop
 INFO: expire start: --no-compress --config=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/backrest --stanza=db
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = db, strStanza = db
DEBUG:     BackupInfo->new(): strBackupClusterPath = [TEST_PATH]/backrest/backup/db
DEBUG:     BackupCommon::backupRegExpGet(): bDifferential = true, bFull = true, bIncremental = true
DEBUG:     BackupCommon::backupRegExpGet=>: strRegExp = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$
DEBUG:     File->list(): bIgnoreMissing = <false>, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [undef], strPathType = backup:cluster, strSortOrder = reverse
DEBUG:     FileCommon::fileList(): bIgnoreMissing = false, strExpression = ^[0-9]{8}\-[0-9]{6}F(\_[0-9]{8}\-[0-9]{6}(D|I)){0,1}$, strPath = [TEST_PATH]/backrest/backup/db, strSortOrder = reverse
DEBUG:     FileCommon::fileList=>: stryFileList = ([BACKUP-DIFF-5], [BACKUP-FULL-3], [BACKUP-DIFF-4], [BACKUP-INCR-5], [BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     File->list=>: stryFileList = ([BACKUP-DIFF-5], [BACKUP-FULL-3], [BACKUP-DIFF-4], [BACKUP-INCR-5], [BACKUP-DIFF-3], [BACKUP-INCR-4], [BACKUP-INCR-3], [BACKUP-DIFF-2], [BACKUP-FULL-2])
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-5]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-4]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-5]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-4]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-INCR-3]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-DIFF-2]
DEBUG:     BackupInfo->current=>: bTest = true
DEBUG:     BackupInfo->current(): strBackup = [BACKUP-FULL-2]
DEBUG:     BackupInfo->current=>: bTest = true
 INFO: archive retention type not set - archive logs will not be expired
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = <true>
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: expire stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

+ supplemental file: [TEST_PATH]/db/pg_backrest.conf
----------------------------------------------------
[db]
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db

[db:restore:tablespace-map]
1=[TEST_PATH]/db/tablespace/ts1-2
2=[TEST_PATH]/db/tablespace/ts2-2

[global:backup]
backup-host=127.0.0.1
backup-user=backrest

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/backrest/pg_backrest.conf
repo-path=[TEST_PATH]/local
repo-remote-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/pg_backrest.conf
----------------------------------------------------------
[db]
db-host=127.0.0.1
db-path=[TEST_PATH]/db/common-2
db-port=[PORT-1]
db-socket-path=[TEST_PATH]/db
db-user=[USER-1]

[global:backup]
archive-copy=y
start-fast=y

[global:command]
cmd-remote=[BACKREST_BIN]

[global:general]
compress=n
config-remote=[TEST_PATH]/db/pg_backrest.conf
repo-path=[TEST_PATH]/backrest

[global:log]
log-level-console=debug
log-level-file=trace

+ supplemental file: [TEST_PATH]/backrest/backup/db/[BACKUP-DIFF-5]/backup.manifest
-----------------------------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup]
backup-label="[BACKUP-DIFF-5]"
backup-prior="[BACKUP-FULL-3]"
backup-timestamp-copy-start=[TIMESTAMP]
backup-timestamp-start=[TIMESTAMP]
backup-timestamp-stop=[TIMESTAMP]
backup-type="diff"

[backup:db]
db-catalog-version=201306121
db-control-version=937
db-system-id=6156904820763115222
db-version="9.3"

[backup:option]
option-archive-check=true
option-archive-copy=true
option-compress=false
option-hardlink=false
option-online=false

[backup:path]
base={"path":"[TEST_PATH]/db/common-2"}
tablespace/2={"link":"2","path":"[TEST_PATH]/db/tablespace/ts2-2"}

[base:file]
PG_VERSION={"checksum":"e1f7a3a299f62225cba076fc6d3d6e677f303482","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
badchecksum.txt={"checksum":"f927212cd08d11a42a666b2f04235398e9ceeb51","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base1.txt={"checksum":"7579ada0808d7f98087a0a586d0df9de009cdc33","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
base/base2.txt={"checksum":"cafac3c59553f2cfde41ce2e62e7662295f108c0","group":"[GROUP-1]","mode":"0600","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
global/pg_control={"checksum":"56fe5780b8dca9705e0c22032a83828860a21235","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-3]","size":[SIZE],"timestamp":[TIMESTAMP-2],"user":"[USER-1]"}

[base:link]
link-test={"destination":"/test","group":"[GROUP-1]","user":"[USER-1]"}
pg_tblspc/2={"destination":"[TEST_PATH]/db/tablespace/ts2-2","group":"[GROUP-1]","user":"[USER-1]"}

[base:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
base={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
global={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
path-test={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}
pg_tblspc={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

[tablespace/2:file]
tablespace2.txt={"checksum":"dc7f76e43c46101b47acc55ae4d593a9e6983578","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}
tablespace2c.txt={"checksum":"dfcb8679956b734706cf87259d50c88f83e80e66","group":"[GROUP-1]","mode":"0600","reference":"[BACKUP-FULL-3]","size":[SIZE],"timestamp":[TIMESTAMP-1],"user":"[USER-1]"}

[tablespace/2:path]
.={"group":"[GROUP-1]","mode":"0700","user":"[USER-1]"}

+ supplemental file: [TEST_PATH]/backrest/backup/db/backup.info
---------------------------------------------------------------
[backrest]
backrest-checksum="[CHECKSUM]"
backrest-format=4
backrest-version="[VERSION-1]"

[backup:current]
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-3]","backup-reference":["[BACKUP-FULL-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[backup:history]
[BACKUP-FULL-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-1]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-2]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-2]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-INCR-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-2]","[BACKUP-INCR-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-INCR-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-DIFF-3]","backup-reference":["[BACKUP-FULL-2]","[BACKUP-DIFF-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"incr","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-4]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-2]","backup-reference":["[BACKUP-FULL-2]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-FULL-3]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"full","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}
[BACKUP-DIFF-5]={"backrest-format":4,"backrest-version":"[VERSION-1]","backup-archive-start":null,"backup-archive-stop":null,"backup-info-repo-size":[SIZE],"backup-info-repo-size-delta":[DELTA],"backup-info-size":[SIZE],"backup-info-size-delta":[DELTA],"backup-prior":"[BACKUP-FULL-3]","backup-reference":["[BACKUP-FULL-3]"],"backup-timestamp-start":[TIMESTAMP],"backup-timestamp-stop":[TIMESTAMP],"backup-type":"diff","db-id":1,"option-archive-check":true,"option-archive-copy":true,"option-compress":false,"option-hardlink":false,"option-online":false}

[db]
db-catalog-version=201306121
db-control-version=937
db-id=1
db-system-id=6156904820763115222
db-version="9.3"

[db:history]
1={"db-catalog-version":201306121,"db-control-version":937,"db-system-id":6156904820763115222,"db-version":"9.3"}

restore delta (no tablespace remap)
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --delta --no-tablespace  --stanza=db restore
------------------------------------------------------------------------------------------------------------------------------------
 INFO: restore start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --no-compress --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --delta --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --stanza=db --no-tablespace --tablespace-map=1=[TEST_PATH]/db/tablespace/ts1-2 --tablespace-map=2=[TEST_PATH]/db/tablespace/ts2-2
DEBUG:     Common:::Lock::lockAquire(): bFailOnNoLock = <true>, bRemote = <false>, iProcessIdx = [undef], strLockType = restore
DEBUG:     Common:::Lock::lockStopTest(): strRepoPath = [TEST_PATH]/local
DEBUG:     Common:::Lock::lockAquire=>: bResult = true
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=restore --config=[TEST_PATH]/backrest/pg_backrest.conf --db-port=[PORT-1] --db-socket-path=[TEST_PATH]/db --repo-remote-path=[TEST_PATH]/backrest --stanza=db remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = db
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/postmaster.pid, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/postmaster.pid
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/PG_VERSION, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/PG_VERSION
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = latest, strPathType = backup:cluster
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = <false>, lModificationTime = [undef], strDestinationFile = [TEST_PATH]/db/common-2/backup.manifest, strDestinationPathType = db:absolute, strGroup = [undef], strMode = <0640>, strSourceFile = latest/backup.manifest, strSourcePathType = backup:cluster, strUser = [undef]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common-2/backup.manifest, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common-2/backup.manifest.backrest.tmp, strSourcePathType = absolute
 INFO: restore backup set [BACKUP-DIFF-5]
 INFO: remap tablespace 2 to [TEST_PATH]/db/common-2/pg_tblspc/2
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = [TEST_PATH]/db/common-2/global/pg_control, strPathType = db:absolute
DEBUG:     File->remove=>: bRemoved = true
 INFO: check/clean db path [TEST_PATH]/db/common-2
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->manifest(): oManifestHashRef = [hash], strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 0, oManifestHashRef = [hash], strPathFileOp = [undef], strPathOp = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = base, strPathOp = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = global, strPathOp = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = path-test, strPathOp = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     File->manifestRecurse(): iDepth = 1, oManifestHashRef = [hash], strPathFileOp = pg_tblspc, strPathOp = [TEST_PATH]/db/common-2, strPathType = db:absolute
 INFO: remove file/link [TEST_PATH]/db/common-2/pg_tblspc/2
 INFO: check/clean db path [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
 INFO: cleanup removed 1 file, 1 link
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/base, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/base
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/global, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/global
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/path-test, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/path-test
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc/2, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/2
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = 0700, strPath = [TEST_PATH]/db/common-2/pg_tblspc/2, strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/link-test, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/link-test
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->pathCreate(): bIgnoreExists = <false>, strMode = 0700, strPath = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1], strPathType = db:absolute
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc/2, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/2
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     Restore->process: restore in main process
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/badchecksum.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/badchecksum.txt
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->hashSize(): bCompressed = <false>, strFile = [TEST_PATH]/db/common-2/badchecksum.txt, strHashType = <sha1>, strPathType = db:absolute
DEBUG:     File->hashSize=>: iSize = 11, strHash = f927212cd08d11a42a666b2f04235398e9ceeb51
 INFO: restore file [TEST_PATH]/db/common-2/badchecksum.txt - exists and matches backup (11B, 0%) checksum f927212cd08d11a42a666b2f04235398e9ceeb51
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/base/base2.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/base/base2.txt
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->hashSize(): bCompressed = <false>, strFile = [TEST_PATH]/db/common-2/base/base2.txt, strHashType = <sha1>, strPathType = db:absolute
DEBUG:     File->hashSize=>: iSize = 9, strHash = cafac3c59553f2cfde41ce2e62e7662295f108c0
 INFO: restore file [TEST_PATH]/db/common-2/base/base2.txt - exists and matches backup (9B, 0%) checksum cafac3c59553f2cfde41ce2e62e7662295f108c0
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/base/base1.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/base/base1.txt
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->hashSize(): bCompressed = <false>, strFile = [TEST_PATH]/db/common-2/base/base1.txt, strHashType = <sha1>, strPathType = db:absolute
DEBUG:     File->hashSize=>: iSize = 9, strHash = 7579ada0808d7f98087a0a586d0df9de009cdc33
 INFO: restore file [TEST_PATH]/db/common-2/base/base1.txt - exists and matches backup (9B, 0%) checksum 7579ada0808d7f98087a0a586d0df9de009cdc33
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/PG_VERSION, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/PG_VERSION
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->hashSize(): bCompressed = <false>, strFile = [TEST_PATH]/db/common-2/PG_VERSION, strHashType = <sha1>, strPathType = db:absolute
DEBUG:     File->hashSize=>: iSize = 3, strHash = e1f7a3a299f62225cba076fc6d3d6e677f303482
 INFO: restore file [TEST_PATH]/db/common-2/PG_VERSION - exists and matches backup (3B, 0%) checksum e1f7a3a299f62225cba076fc6d3d6e677f303482
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2c.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2c.txt
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2c.txt, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-FULL-3]/tablespace/2/tablespace2c.txt, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2c.txt.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2c.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2c.txt.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2c.txt (12B, 0%) checksum dfcb8679956b734706cf87259d50c88f83e80e66
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2.txt, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2.txt
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-1], strDestinationFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2.txt, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-FULL-3]/tablespace/2/tablespace2.txt, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2.txt.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2.txt, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2.txt.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/common-2/pg_tblspc/2/[TS_PATH-1]/tablespace2.txt (7B, 0%) checksum dc7f76e43c46101b47acc55ae4d593a9e6983578
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/recovery.conf, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/recovery.conf
DEBUG:     FileCommon::fileExists=>: bExists = true
DEBUG:     File->exists=>: bExists = true
DEBUG:     File->remove(): bIgnoreMissing = <true>, bTemp = [undef], strPath = [TEST_PATH]/db/common-2/recovery.conf, strPathType = db:absolute
DEBUG:     File->remove=>: bRemoved = true
 INFO: wrote [TEST_PATH]/db/common-2/recovery.conf
 INFO: restore global/pg_control (copied last to ensure aborted restores cannot be started)
DEBUG:     File->exists(): strPath = [TEST_PATH]/db/common-2/global/pg_control, strPathType = db:absolute
DEBUG:     FileCommon::fileExists(): strFile = [TEST_PATH]/db/common-2/global/pg_control
DEBUG:     FileCommon::fileExists=>: bExists = false
DEBUG:     File->exists=>: bExists = false
DEBUG:     File->copy(): bAppendChecksum = <false>, bDestinationCompress = <false>, bDestinationPathCreate = <false>, bIgnoreMissingSource = <false>, bSourceCompressed = false, lModificationTime = [MODIFICATION-TIME-2], strDestinationFile = [TEST_PATH]/db/common-2/global/pg_control, strDestinationPathType = db:absolute, strGroup = [GROUP-1], strMode = 0600, strSourceFile = [BACKUP-FULL-3]/base/global/pg_control, strSourcePathType = backup:cluster, strUser = [USER-1]
DEBUG:     File->owner(): strFile = [TEST_PATH]/db/common-2/global/pg_control.backrest.tmp, strGroup = [GROUP-1], strPathType = absolute, strUser = [USER-1]
DEBUG:     File->move(): bDestinationPathCreate = false, strDestinationFile = [TEST_PATH]/db/common-2/global/pg_control, strDestinationPathType = absolute, strSourceFile = [TEST_PATH]/db/common-2/global/pg_control.backrest.tmp, strSourcePathType = absolute
 INFO: restore file [TEST_PATH]/db/common-2/global/pg_control (8KB, 100%) checksum 56fe5780b8dca9705e0c22032a83828860a21235
DEBUG:     File->remove(): bIgnoreMissing = false, bTemp = [undef], strPath = [TEST_PATH]/db/common-2/backup.manifest, strPathType = db:absolute
DEBUG:     File->remove=>: bRemoved = true
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
 INFO: restore stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

info
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf info
------------------------------------------------------------------------------------------------------------------------------------
DEBUG:     info start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = [undef]
DEBUG:     Info->stanzaList(): oFile = [object], strStanza = [undef]
stanza db
   status: ok
   oldest backup label: [BACKUP-FULL-2]
   oldest backup timestamp: [TIMESTAMP-STR]
   latest backup label: [BACKUP-DIFF-5]
   latest backup timestamp: [TIMESTAMP-STR]

stanza db_empty
   status: error (no valid backups)
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
DEBUG:     info stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

info
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf info --output=json
------------------------------------------------------------------------------------------------------------------------------------
DEBUG:     info start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --output=json --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = [undef]
DEBUG:     Info->stanzaList(): oFile = [object], strStanza = [undef]
[
   {
       "backup" : [
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-FULL-2]",
               "prior" : null,
               "reference" : null,
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "full"
           },
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-DIFF-2]",
               "prior" : "[BACKUP-FULL-2]",
               "reference" : [
                   "[BACKUP-FULL-2]"
               ],
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "diff"
           },
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-INCR-3]",
               "prior" : "[BACKUP-DIFF-2]",
               "reference" : [
                   "[BACKUP-FULL-2]",
                   "[BACKUP-DIFF-2]"
               ],
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "incr"
           },
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-INCR-4]",
               "prior" : "[BACKUP-INCR-3]",
               "reference" : [
                   "[BACKUP-FULL-2]",
                   "[BACKUP-DIFF-2]",
                   "[BACKUP-INCR-3]"
               ],
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "incr"
           },
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-DIFF-3]",
               "prior" : "[BACKUP-FULL-2]",
               "reference" : [
                   "[BACKUP-FULL-2]"
               ],
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "diff"
           },
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-INCR-5]",
               "prior" : "[BACKUP-DIFF-3]",
               "reference" : [
                   "[BACKUP-FULL-2]",
                   "[BACKUP-DIFF-3]"
               ],
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "incr"
           },
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-DIFF-4]",
               "prior" : "[BACKUP-FULL-2]",
               "reference" : [
                   "[BACKUP-FULL-2]"
               ],
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "diff"
           },
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-FULL-3]",
               "prior" : null,
               "reference" : null,
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "full"
           },
           {
               "archive" : {
                   "start" : null,
                   "stop" : null
               },
               "backrest" : {
                   "format" : 4,
                   "version" : "[VERSION-1]"
               },
               "database" : {
                   "id" : 1
               },
               "info" : {
                   "delta" : [DELTA],
                   "repository" : {
                       "delta" : [DELTA],
                       "size" : [SIZE]
                   },
                   "size" : [SIZE]
               },
               "label" : "[BACKUP-DIFF-5]",
               "prior" : "[BACKUP-FULL-3]",
               "reference" : [
                   "[BACKUP-FULL-3]"
               ],
               "timestamp" : {
                   "start" : [TIMESTAMP],
                   "stop" : [TIMESTAMP]
               },
               "type" : "diff"
           }
       ],
       "db" : [
           {
               "id" : "1",
               "system-id" : 6156904820763115222,
               "version" : "9.3"
           }
       ],
       "name" : "db",
       "status" : {
           "code" : 0,
           "message" : "ok"
       }
   },
   {
       "backup" : [],
       "db" : [],
       "name" : "db_empty",
       "status" : {
           "code" : 2,
           "message" : "no valid backups"
       }
   }
]
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
DEBUG:     info stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

info bogus
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=bogus info
------------------------------------------------------------------------------------------------------------------------------------
DEBUG:     info start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --stanza=bogus
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest --stanza=bogus remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest --stanza=bogus remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = bogus
DEBUG:     Info->stanzaList(): oFile = [object], strStanza = bogus
stanza bogus
   status: error (missing stanza path)
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
DEBUG:     info stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

info bogus
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --stanza=bogus info --output=json
------------------------------------------------------------------------------------------------------------------------------------
DEBUG:     info start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --output=json --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest --stanza=bogus
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest --stanza=bogus remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest --stanza=bogus remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = bogus
DEBUG:     Info->stanzaList(): oFile = [object], strStanza = bogus
[
   {
       "backup" : [],
       "db" : [],
       "name" : "bogus",
       "status" : {
           "code" : 1,
           "message" : "missing stanza path"
       }
   }
]
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
DEBUG:     info stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

info
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf info
------------------------------------------------------------------------------------------------------------------------------------
DEBUG:     info start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = [undef]
DEBUG:     Info->stanzaList(): oFile = [object], strStanza = [undef]
No stanzas exist in [TEST_PATH]/backrest.
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
DEBUG:     info stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false

info
> [BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf info --output=json
------------------------------------------------------------------------------------------------------------------------------------
DEBUG:     info start: --backup-host=127.0.0.1 --backup-user=backrest --cmd-remote=[BACKREST_BIN] --config=[TEST_PATH]/db/pg_backrest.conf --config-remote=[TEST_PATH]/backrest/pg_backrest.conf --log-level-console=debug --log-level-file=trace --output=json --repo-path=[TEST_PATH]/local --repo-remote-path=[TEST_PATH]/backrest
DEBUG:     Protocol::RemoteMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = [BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest remote, strHost = 127.0.0.1, strUser = [USER-2]
DEBUG:     Protocol::CommonMaster->new(): iBufferMax = 4194304, iCompressLevel = 6, iCompressLevelNetwork = 3, iProtocolTimeout = 1830, strCommand = ssh -o Compression=no -o PasswordAuthentication=no backrest@127.0.0.1 '[BACKREST_BIN] --command=info --config=[TEST_PATH]/backrest/pg_backrest.conf --repo-remote-path=[TEST_PATH]/backrest remote', strName = remote
DEBUG:     File->new(): iThreadIdx = [undef], oProtocol = [object], strBackupPath = [TEST_PATH]/backrest, strDefaultFileMode = <0640>, strDefaultPathMode = <0750>, strRemote = backup, strStanza = [undef]
DEBUG:     Info->stanzaList(): oFile = [object], strStanza = [undef]
[]
DEBUG:     Exit::exitSafe(): iExitCode = 0, strSignal = [undef]
DEBUG:     info stop
DEBUG:     Common:::Lock::lockRelease(): bFailOnNoLock = false
